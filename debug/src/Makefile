# Makefile.in generated by automake 1.10.1 from Makefile.am.
# KDE tags expanded automatically by am_edit - $Revision: 483858 $ 
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.





VPATH = /home/gregor/mesydaq2/src
pkgdatadir = $(datadir)/mesydaq2
pkglibdir = $(libdir)/mesydaq2
pkgincludedir = $(includedir)/mesydaq2
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
bin_PROGRAMS = mesydaq2$(EXEEXT)
subdir = src
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.in
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/admin/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am__installdirs = "$(DESTDIR)$(bindir)" "$(DESTDIR)$(shelldesktopdir)" \
	"$(DESTDIR)$(shellrcdir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_mesydaq2_OBJECTS = controlinterface.$(OBJEXT) \
	corba_generic.$(OBJEXT) corbadeviceSK.$(OBJEXT) \
	corbathread.$(OBJEXT) datacruncher.$(OBJEXT) \
	histogram.$(OBJEXT) main.$(OBJEXT) mainwindow.$(OBJEXT) \
	mcpd8.$(OBJEXT) measurement.$(OBJEXT) mesydaq2.$(OBJEXT) \
	mesydaq2widget.$(OBJEXT) mpsd8.$(OBJEXT) \
	networkdevice.$(OBJEXT)
#>- mesydaq2_OBJECTS = $(am_mesydaq2_OBJECTS)
#>+ 10
mesydaq2_final_OBJECTS = mesydaq2.all_cpp.o 
mesydaq2_nofinal_OBJECTS = controlinterface.$(OBJEXT) \
	corba_generic.$(OBJEXT) corbadeviceSK.$(OBJEXT) \
	corbathread.$(OBJEXT) datacruncher.$(OBJEXT) \
	histogram.$(OBJEXT) main.$(OBJEXT) mainwindow.$(OBJEXT) \
	mcpd8.$(OBJEXT) measurement.$(OBJEXT) mesydaq2.$(OBJEXT) \
	mesydaq2widget.$(OBJEXT) mpsd8.$(OBJEXT) \
	networkdevice.$(OBJEXT) mesydaq2mainwindow.$(OBJEXT) mesydaq2widgetbase.$(OBJEXT)
mesydaq2_OBJECTS = $(mesydaq2_nofinal_OBJECTS)
#mesydaq2_OBJECTS = $(mesydaq2_final_OBJECTS)
am__DEPENDENCIES_1 =
mesydaq2_DEPENDENCIES = $(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
#>- mesydaq2_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
#>- 	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
#>- 	$(CXXFLAGS) $(mesydaq2_LDFLAGS) $(LDFLAGS) -o $@
#>+ 3
mesydaq2_LINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(KDE_CXXFLAGS) $(mesydaq2_LDFLAGS) $(LDFLAGS) -o $@
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/admin/depcomp
am__depfiles_maybe = depfiles
#>- CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 2
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
#>- LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
#>- 	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
#>+ 3
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS)
CXXLD = $(CXX)
#>- CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
#>- 	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) \
#>- 	$(LDFLAGS) -o $@
#>+ 3
CXXLINK = $(LIBTOOL) --tag=CXX $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) \
	--mode=link $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(KDE_CXXFLAGS) $(AM_LDFLAGS) \
	$(LDFLAGS) -o $@
SOURCES = $(mesydaq2_SOURCES)
DIST_SOURCES = $(mesydaq2_SOURCES)
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = `echo $$p | sed -e 's|^.*/||'`;
shelldesktopDATA_INSTALL = $(INSTALL_DATA)
shellrcDATA_INSTALL = $(INSTALL_DATA)
DATA = $(shelldesktop_DATA) $(shellrc_DATA)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
#>- DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
#>+ 1
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(KDE_DIST)
ACLOCAL = ${SHELL} /home/gregor/mesydaq2/admin/missing --run aclocal-1.10
AMTAR = ${SHELL} /home/gregor/mesydaq2/admin/missing --run tar
AR = ar
ARTSCCONFIG = /opt/kde3/bin/artsc-config
AUTOCONF = $(SHELL) $(top_srcdir)/admin/cvs.sh configure || touch configure
AUTODIRS = 
AUTOHEADER = ${SHELL} /home/gregor/mesydaq2/admin/missing --run autoheader
AUTOMAKE = ${SHELL} /home/gregor/mesydaq2/admin/missing --run automake-1.10
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -std=iso9899:1990 -W -Wall -Wchar-subscripts -Wshadow -Wpointer-arith -Wmissing-prototypes -Wwrite-strings -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -g3 -fno-inline   -Wformat-security -Wmissing-format-attribute
CONF_FILES =  $(top_srcdir)/./admin/configure.in.min $(top_srcdir)/configure.in.in
CPP = gcc -E
CPPFLAGS =  -DQT_THREAD_SUPPORT -D__OMNIORB4__ -D__REENTRANT -D__OSVERSION__=2 -D__linux__ -D__x86__  -D_REENTRANT
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -Wno-long-long -Wundef -ansi -D_XOPEN_SOURCE=500 -D_BSD_SOURCE -Wcast-align -Wchar-subscripts -Wall -W -Wpointer-arith -fno-builtin -g3 -fno-inline -O0 -g3 -Wformat-security -Wmissing-format-attribute -Wno-non-virtual-dtor -fno-exceptions -fno-check-new -fno-common -fexceptions
CYGPATH_W = echo
DCOPIDL = /opt/kde3/bin/dcopidl
DCOPIDL2CPP = /opt/kde3/bin/dcopidl2cpp
DCOPIDLNG = /opt/kde3/bin/dcopidlng
DCOP_DEPENDENCIES = $(DCOPIDL) $(DCOPIDLNG)
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /usr/bin/grep -E
ENABLE_PERMISSIVE_FLAG = -fpermissive
EXEEXT = 
F77 = gfortran
FFLAGS = -g -O2
FRAMEWORK_COREAUDIO = 
GMSGFMT = /usr/bin/msgfmt
GREP = /usr/bin/grep
HAVE_GCC_VISIBILITY = 0
INSTALL = /usr/bin/install -c -p
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL} $(INSTALL_STRIP_FLAG)
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
KCFG_DEPENDENCIES = $(KCONFIG_COMPILER)
KCONFIG_COMPILER = /opt/kde3/bin/kconfig_compiler
KDECONFIG = /opt/kde3/bin/kde-config
KDE_CHECK_PLUGIN = $(KDE_PLUGIN) -rpath $(libdir)
KDE_EXTRA_RPATH = 
KDE_INCLUDES = -I/opt/kde3/include
KDE_LDFLAGS = -L/opt/kde3/lib64
KDE_MT_LDFLAGS = 
KDE_MT_LIBS = -lpthread
KDE_NO_UNDEFINED = -Wl,--no-undefined -Wl,--allow-shlib-undefined
KDE_PLUGIN = -avoid-version -module -no-undefined $(KDE_NO_UNDEFINED) $(KDE_RPATH) $(KDE_MT_LDFLAGS)
KDE_RPATH = -R $(libdir) -R $(kde_libraries) -R $(qt_libraries) -R $(x_libraries)
KDE_USE_CLOSURE_FALSE = 
KDE_USE_CLOSURE_TRUE = #
KDE_USE_FINAL_FALSE = 
KDE_USE_FINAL_TRUE = #
KDE_USE_FPIE = -fPIE
KDE_USE_NMCHECK_FALSE = 
KDE_USE_NMCHECK_TRUE = #
KDE_USE_PIE = -pie
KDE_XSL_STYLESHEET = /opt/kde3/share/apps/ksgmltools2/customization/kde-chunk.xsl
LDFLAGS = 
LDFLAGS_AS_NEEDED = 
LDFLAGS_NEW_DTAGS = 
LIBCOMPAT = 
LIBCRYPT = -lcrypt
LIBDL = -ldl
LIBJPEG = -ljpeg
LIBOBJS = 
LIBPNG = -lpng -lz -lm
LIBPTHREAD = -lpthread
LIBRESOLV = -lresolv
LIBS = 
LIBSM = -lSM -lICE
LIBSOCKET = 
LIBTOOL = $(SHELL) $(top_builddir)/libtool --silent
LIBUCB = 
LIBUTIL = -lutil
LIBZ = -lz
LIB_KAB = -lkab
LIB_KABC = -lkabc
LIB_KDECORE = -lkdecore
LIB_KDED = 
LIB_KDEPIM = -lkdepim
LIB_KDEPRINT = -lkdeprint
LIB_KDEUI = -lkdeui
LIB_KDNSSD = -lkdnssd
LIB_KFILE = -lkio
LIB_KFM = 
LIB_KHTML = -lkhtml
LIB_KIMPROXY = -lkimproxy
LIB_KIO = -lkio
LIB_KJS = -lkjs
LIB_KNEWSTUFF = -lknewstuff
LIB_KPARTS = -lkparts
LIB_KSPELL = -lkspell
LIB_KSYCOCA = -lkio
LIB_KUNITTEST = -lkunittest
LIB_KUTILS = -lkutils
LIB_POLL = 
LIB_QPE = 
LIB_QT = -lqt-mt  $(LIBZ) $(LIBPNG) -lXext $(LIB_X11) $(LIBSM) -lpthread
LIB_SMB = -lsmb
LIB_X11 = -lX11 $(LIBSOCKET)
LIB_XEXT = -lXext
LIB_XRENDER = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/gregor/mesydaq2/admin/missing --run makeinfo
MAKEKDEWIDGETS = 
MCOPIDL = /opt/kde3/bin/mcopidl
MEINPROC = /opt/kde3/bin/meinproc
MKDIR_P = /bin/mkdir -p
MOC = /usr/lib/qt3/bin/moc
MSGFMT = /usr/bin/msgfmt
NOOPT_CFLAGS = -O0
NOOPT_CXXFLAGS = -O0
OBJEXT = o
PACKAGE = mesydaq2
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
PERL = /usr/bin/perl
PKG_CONFIG = /usr/bin/pkg-config
QTE_NORTTI = 
QT_INCLUDES = -I/usr/lib/qt3/include
QT_LDFLAGS = -L/usr/lib/qt3//lib64
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
TOPSUBDIRS =  doc po src
UIC = /usr/lib/qt3/bin/uic -L $(kde_widgetdir) -nounload
UIC_TR = tr2i18n
USER_INCLUDES = 
USER_LDFLAGS = 
USE_EXCEPTIONS = -fexceptions
USE_RTTI = 
USE_THREADS = 
VERSION = 0.9
WOVERLOADED_VIRTUAL = -Woverloaded-virtual
XGETTEXT = /usr/bin/xgettext
XMKMF = 
XMLLINT = /usr/bin/xmllint
X_EXTRA_LIBS = 
X_INCLUDES = -I.
X_LDFLAGS = -L/usr/lib64
X_PRE_LIBS = 
X_RPATH = -R $(x_libraries)
abs_builddir = /home/gregor/mesydaq2/debug/src
abs_srcdir = /home/gregor/mesydaq2/src
abs_top_builddir = /home/gregor/mesydaq2/debug
abs_top_srcdir = /home/gregor/mesydaq2
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = gfortran
all_includes = -I/opt/kde3/include -I/usr/lib/qt3/include -I. 
all_libraries = -L/opt/kde3/lib64 -L/usr/lib/qt3//lib64 -L/usr/lib64   
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = $(SHELL) /home/gregor/mesydaq2/admin/install-sh
kde_appsdir = ${datadir}/applnk
kde_bindir = ${exec_prefix}/bin
kde_confdir = ${datadir}/config
kde_datadir = ${datadir}/apps
kde_htmldir = ${datadir}/doc/HTML
kde_icondir = ${datadir}/icons
kde_includes = /opt/kde3/include
kde_kcfgdir = ${datadir}/config.kcfg
kde_libraries = /opt/kde3/lib64
kde_libs_htmldir = /opt/kde3/share/doc/HTML
kde_libs_prefix = /opt/kde3
kde_locale = ${datadir}/locale
kde_mimedir = ${datadir}/mimelnk
kde_moduledir = ${libdir}/kde3
kde_qtver = 3
kde_servicesdir = ${datadir}/services
kde_servicetypesdir = ${datadir}/servicetypes
kde_sounddir = ${datadir}/sounds
kde_styledir = ${libdir}/kde3/plugins/styles
kde_templatesdir = ${datadir}/templates
kde_wallpaperdir = ${datadir}/wallpapers
kde_widgetdir = /opt/kde3/lib64/kde3/plugins/designer
kdeinitdir = $(kde_moduledir)
libdir = ${exec_prefix}/lib64
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /opt/kde3
program_transform_name = s,x,x,
psdir = ${docdir}
qt_includes = /usr/lib/qt3/include
qt_libraries = /usr/lib/qt3//lib64
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = /home/gregor/mesydaq2/src
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_builddir = ..
top_srcdir = /home/gregor/mesydaq2
x_includes = .
x_libraries = /usr/lib64
xdg_appsdir = ${datadir}/applications/kde
xdg_directorydir = ${datadir}/desktop-directories
xdg_menudir = ${sysconfdir}/xdg/menus

# set the include path for X, qt and KDE
INCLUDES = $(all_includes)

# these are the headers for your project
noinst_HEADERS = corbathread.h datacruncher.h histogram.h mainwindow.h mcpd8.h \
	mesydaq2.h mpsd8.h networkdevice.h


# let automoc handle all of the meta source files (moc)
#>- METASOURCES = AUTO
KDE_ICON = AUTO

# the application source, library search path, and link libraries
#>- mesydaq2_SOURCES = controlinterface.cpp corba_generic.cpp corbadeviceSK.cpp \
#>- 	corbathread.cpp datacruncher.cpp histogram.cpp main.cpp mainwindow.cpp mcpd8.cpp \
#>- 	measurement.cpp mesydaq2.cpp mesydaq2mainwindow.ui mesydaq2widget.cpp \
#>- 	mesydaq2widgetbase.ui mpsd8.cpp networkdevice.cpp
#>+ 4
mesydaq2_SOURCES=controlinterface.cpp corba_generic.cpp corbadeviceSK.cpp \
	corbathread.cpp datacruncher.cpp histogram.cpp main.cpp mainwindow.cpp mcpd8.cpp \
	measurement.cpp mesydaq2.cpp  mesydaq2widget.cpp \
	 mpsd8.cpp networkdevice.cpp mesydaq2mainwindow.cpp mesydaq2widgetbase.cpp

mesydaq2_LDFLAGS = $(KDE_RPATH) $(all_libraries) -lomniDynamic4 -lomniORB4 \
	-lomnithread

mesydaq2_LDADD = $(LIBPTHREAD) $(LIB_KDEUI)

# this is where the desktop file will go 
shelldesktopdir = $(kde_appsdir)/Utilities
shelldesktop_DATA = mesydaq2.desktop

# this is where the shell's XML-GUI resource file goes
shellrcdir = $(kde_datadir)/mesydaq2
shellrc_DATA = mesydaq2ui.rc
#>- all: all-am
#>+ 1
all: docs-am  all-am

.SUFFIXES:
.SUFFIXES: .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
#>- 	@for dep in $?; do \
#>- 	  case '$(am__configure_deps)' in \
#>- 	    *$$dep*) \
#>- 	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
#>- 		&& exit 0; \
#>- 	      exit 1;; \
#>- 	  esac; \
#>- 	done; \
#>- 	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
#>- 	cd $(top_srcdir) && \
#>- 	  $(AUTOMAKE) --gnu  src/Makefile
#>+ 12
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit src/Makefile.in
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(MKDIR_P) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	     || test -f $$p1 \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
mesydaq2$(EXEEXT): $(mesydaq2_OBJECTS) $(mesydaq2_DEPENDENCIES) 
	@rm -f mesydaq2$(EXEEXT)
	$(mesydaq2_LINK) $(mesydaq2_OBJECTS) $(mesydaq2_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/controlinterface.Po
include ./$(DEPDIR)/corba_generic.Po
include ./$(DEPDIR)/corbadeviceSK.Po
include ./$(DEPDIR)/corbathread.Po
include ./$(DEPDIR)/datacruncher.Po
include ./$(DEPDIR)/histogram.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/mainwindow.Po
include ./$(DEPDIR)/mcpd8.Po
include ./$(DEPDIR)/measurement.Po
include ./$(DEPDIR)/mesydaq2.Po
include ./$(DEPDIR)/mesydaq2widget.Po
include ./$(DEPDIR)/mpsd8.Po
include ./$(DEPDIR)/networkdevice.Po

.cpp.o:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	$(CXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	$(LTCXXCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	mv -f $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs
install-shelldesktopDATA: $(shelldesktop_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(shelldesktopdir)" || $(MKDIR_P) "$(DESTDIR)$(shelldesktopdir)"
	@list='$(shelldesktop_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(shelldesktopDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(shelldesktopdir)/$$f'"; \
	  $(shelldesktopDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(shelldesktopdir)/$$f"; \
	done

uninstall-shelldesktopDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(shelldesktop_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(shelldesktopdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(shelldesktopdir)/$$f"; \
	done
install-shellrcDATA: $(shellrc_DATA)
	@$(NORMAL_INSTALL)
	test -z "$(shellrcdir)" || $(MKDIR_P) "$(DESTDIR)$(shellrcdir)"
	@list='$(shellrc_DATA)'; for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  f=$(am__strip_dir) \
	  echo " $(shellrcDATA_INSTALL) '$$d$$p' '$(DESTDIR)$(shellrcdir)/$$f'"; \
	  $(shellrcDATA_INSTALL) "$$d$$p" "$(DESTDIR)$(shellrcdir)/$$f"; \
	done

uninstall-shellrcDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(shellrc_DATA)'; for p in $$list; do \
	  f=$(am__strip_dir) \
	  echo " rm -f '$(DESTDIR)$(shellrcdir)/$$f'"; \
	  rm -f "$(DESTDIR)$(shellrcdir)/$$f"; \
	done

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonemtpy = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) $(DATA) $(HEADERS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)" "$(DESTDIR)$(shelldesktopdir)" "$(DESTDIR)$(shellrcdir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
#>- clean: clean-am
#>+ 1
clean: kde-rpo-clean  clean-am

#>- clean-am: clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am
#>+ 1
clean-am: clean-metasources clean-ui clean-bcheck clean-final  clean-binPROGRAMS clean-generic clean-libtool mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

#>- install-data-am: install-shelldesktopDATA install-shellrcDATA
#>+ 1
install-data-am: install-kde-icons  install-shelldesktopDATA install-shellrcDATA

install-dvi: install-dvi-am

install-exec-am: install-binPROGRAMS

install-html: install-html-am

install-info: install-info-am

install-man:

install-pdf: install-pdf-am

install-ps: install-ps-am

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

#>- uninstall-am: uninstall-binPROGRAMS uninstall-shelldesktopDATA \
#>- 	uninstall-shellrcDATA
#>+ 2
uninstall-am: uninstall-kde-icons  uninstall-binPROGRAMS uninstall-shelldesktopDATA \
	uninstall-shellrcDATA

.MAKE: install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-libtool ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am install-man \
	install-pdf install-pdf-am install-ps install-ps-am \
	install-shelldesktopDATA install-shellrcDATA install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-shelldesktopDATA uninstall-shellrcDATA


messages: rc.cpp
	$(EXTRACTRC) `find . -name \*.ui -o -name \*.rc` > rc.cpp
	$(XGETTEXT) *.cpp -o $(podir)/mesydaq2.pot
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:

#>+ 3
mainconfig.moc: $(srcdir)/mainconfig.h
	$(MOC) $(srcdir)/mainconfig.h -o mainconfig.moc

#>+ 2
mocs: mainconfig.moc

#>+ 3
measurement.moc: $(srcdir)/measurement.h
	$(MOC) $(srcdir)/measurement.h -o measurement.moc

#>+ 2
mocs: measurement.moc

#>+ 3
mpsd8.moc: $(srcdir)/mpsd8.h
	$(MOC) $(srcdir)/mpsd8.h -o mpsd8.moc

#>+ 2
mocs: mpsd8.moc

#>+ 3
mcpd8.moc: $(srcdir)/mcpd8.h
	$(MOC) $(srcdir)/mcpd8.h -o mcpd8.moc

#>+ 2
mocs: mcpd8.moc

#>+ 3
mesydaq2.moc: $(srcdir)/mesydaq2.h
	$(MOC) $(srcdir)/mesydaq2.h -o mesydaq2.moc

#>+ 2
mocs: mesydaq2.moc

#>+ 3
histogram.moc: $(srcdir)/histogram.h
	$(MOC) $(srcdir)/histogram.h -o histogram.moc

#>+ 2
mocs: histogram.moc

#>+ 3
mainwindow.moc: $(srcdir)/mainwindow.h
	$(MOC) $(srcdir)/mainwindow.h -o mainwindow.moc

#>+ 2
mocs: mainwindow.moc

#>+ 3
datacruncher.moc: $(srcdir)/datacruncher.h
	$(MOC) $(srcdir)/datacruncher.h -o datacruncher.moc

#>+ 2
mocs: datacruncher.moc

#>+ 3
mesydaq2widget.moc: $(srcdir)/mesydaq2widget.h
	$(MOC) $(srcdir)/mesydaq2widget.h -o mesydaq2widget.moc

#>+ 2
mocs: mesydaq2widget.moc

#>+ 3
networkdevice.moc: $(srcdir)/networkdevice.h
	$(MOC) $(srcdir)/networkdevice.h -o networkdevice.moc

#>+ 2
mocs: networkdevice.moc

#>+ 3
controlinterface.moc: $(srcdir)/controlinterface.h
	$(MOC) $(srcdir)/controlinterface.h -o controlinterface.moc

#>+ 2
mocs: controlinterface.moc

#>+ 3
clean-metasources:
	-rm -f  mainconfig.moc measurement.moc mpsd8.moc mcpd8.moc mesydaq2.moc histogram.moc mainwindow.moc datacruncher.moc mesydaq2widget.moc networkdevice.moc controlinterface.moc

#>+ 2
KDE_DIST=mesydaq2.desktop mesydaq2ui.rc mesycfg.mcfg corbadevice.idl mesydaq2widget.h mdefines.h mesydaq2.lsm corba_generic.h mainconfig.h controlinterface.h mesydaq2mainwindow.ui hi16-app-mesydaq2.png corbathread.cpp_back Makefile.in mesydaq2widgetbase.ui mainconfig.cpp measurement.h corbadevice.h hi32-app-mesydaq2.png corbathread.h_back Makefile.am structures.h 

#>+ 5
clean-ui:
	-rm -f \
	mesydaq2mainwindow.cpp mesydaq2mainwindow.h mesydaq2mainwindow.moc \
	mesydaq2widgetbase.cpp mesydaq2widgetbase.h mesydaq2widgetbase.moc 

#>+ 2
docs-am:

#>+ 10
install-kde-icons:
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps
	$(INSTALL_DATA) $(srcdir)/hi32-app-mesydaq2.png $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/mesydaq2.png
	$(mkinstalldirs) $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps
	$(INSTALL_DATA) $(srcdir)/hi16-app-mesydaq2.png $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/mesydaq2.png

uninstall-kde-icons:
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/32x32/apps/mesydaq2.png
	-rm -f $(DESTDIR)$(kde_icondir)/hicolor/16x16/apps/mesydaq2.png

#>+ 15
force-reedit:
		@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
	cd $(top_srcdir) && perl admin/am_edit src/Makefile.in


#>+ 21
clean-bcheck: 
	rm -f *.bchecktest.cc *.bchecktest.cc.class a.out

bcheck: bcheck-am

bcheck-am:
	@for i in ; do \
	    if test $(srcdir)/$$i -nt $$i.bchecktest.cc; then \
	        echo "int main() {return 0;}" > $$i.bchecktest.cc ; \
	        echo "#include \"$$i\"" >> $$i.bchecktest.cc ; \
	        echo "$$i"; \
	        if ! $(CXXCOMPILE)  --dump-class-hierarchy -c $$i.bchecktest.cc; then \
	            rm -f $$i.bchecktest.cc; exit 1; \
	        fi ; \
	        echo "" >> $$i.bchecktest.cc.class; \
	        perl $(top_srcdir)/admin/bcheck.pl $$i.bchecktest.cc.class || { rm -f $$i.bchecktest.cc; exit 1; }; \
	        rm -f a.out; \
	    fi ; \
	done


#>+ 11
mesydaq2.all_cpp.cpp: $(srcdir)/Makefile.in $(srcdir)/controlinterface.cpp $(srcdir)/corba_generic.cpp $(srcdir)/corbadeviceSK.cpp $(srcdir)/corbathread.cpp $(srcdir)/datacruncher.cpp $(srcdir)/histogram.cpp $(srcdir)/main.cpp $(srcdir)/mainwindow.cpp $(srcdir)/mcpd8.cpp $(srcdir)/measurement.cpp $(srcdir)/mesydaq2.cpp $(srcdir)/mesydaq2widget.cpp $(srcdir)/mpsd8.cpp $(srcdir)/networkdevice.cpp mesydaq2mainwindow.cpp mesydaq2widgetbase.cpp  measurement.moc mcpd8.moc mpsd8.moc mesydaq2widgetbase.moc mesydaq2.moc histogram.moc datacruncher.moc mainwindow.moc mesydaq2widget.moc networkdevice.moc controlinterface.moc mesydaq2mainwindow.moc
	@echo 'creating mesydaq2.all_cpp.cpp ...'; \
	rm -f mesydaq2.all_cpp.files mesydaq2.all_cpp.final; \
	echo "#define KDE_USE_FINAL 1" >> mesydaq2.all_cpp.final; \
	for file in controlinterface.cpp corba_generic.cpp corbadeviceSK.cpp corbathread.cpp datacruncher.cpp histogram.cpp main.cpp mainwindow.cpp mcpd8.cpp measurement.cpp mesydaq2.cpp mesydaq2widget.cpp mpsd8.cpp networkdevice.cpp mesydaq2mainwindow.cpp mesydaq2widgetbase.cpp ; do \
	  echo "#include \"$$file\"" >> mesydaq2.all_cpp.files; \
	  test ! -f $(srcdir)/$$file || egrep '^#pragma +implementation' $(srcdir)/$$file >> mesydaq2.all_cpp.final; \
	done; \
	cat mesydaq2.all_cpp.final mesydaq2.all_cpp.files > mesydaq2.all_cpp.cpp; \
	rm -f mesydaq2.all_cpp.final mesydaq2.all_cpp.files

#>+ 3
clean-final:
	-rm -f mesydaq2.all_cpp.cpp

#>+ 3
final:
	$(MAKE) mesydaq2_OBJECTS="$(mesydaq2_final_OBJECTS)" all-am

#>+ 3
final-install:
	$(MAKE) mesydaq2_OBJECTS="$(mesydaq2_final_OBJECTS)" install-am

#>+ 3
no-final:
	$(MAKE) mesydaq2_OBJECTS="$(mesydaq2_nofinal_OBJECTS)" all-am

#>+ 3
no-final-install:
	$(MAKE) mesydaq2_OBJECTS="$(mesydaq2_nofinal_OBJECTS)" install-am

#>+ 3
kde-rpo-clean:
	-rm -f *.rpo

#>+ 39
measurement.o: measurement.moc 
mainconfig.lo: mainconfig.moc 
$(srcdir)/datacruncher.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
mcpd8.lo: mcpd8.moc 
$(srcdir)/corba_generic.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
$(srcdir)/main.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
$(srcdir)/mcpd8.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
controlinterface.o: controlinterface.moc 
$(srcdir)/mesydaq2.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
networkdevice.lo: networkdevice.moc 
$(srcdir)/mainwindow.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
mainconfig.o: mainconfig.moc 
$(srcdir)/corbathread.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
mesydaq2widget.o: mesydaq2widget.moc 
mesydaq2widget.lo: mesydaq2widget.moc 
nmcheck-am: nmcheck
$(srcdir)/networkdevice.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
$(srcdir)/mpsd8.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
mesydaq2.lo: mesydaq2.moc 
$(srcdir)/controlinterface.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
mesydaq2.o: mesydaq2.moc 
mcpd8.o: mcpd8.moc 
mainwindow.lo: mainwindow.moc 
networkdevice.o: networkdevice.moc 
$(srcdir)/measurement.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
measurement.lo: measurement.moc 
datacruncher.o: datacruncher.moc 
mpsd8.lo: mpsd8.moc 
nmcheck: 
mpsd8.o: mpsd8.moc 
$(srcdir)/histogram.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
$(srcdir)/corbadeviceSK.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 
histogram.lo: histogram.moc 
histogram.o: histogram.moc 
mainwindow.o: mainwindow.moc 
controlinterface.lo: controlinterface.moc 
datacruncher.lo: datacruncher.moc 
$(srcdir)/mesydaq2widget.cpp: mesydaq2mainwindow.h mesydaq2widgetbase.h 

#>+ 30
mesydaq2widgetbase.cpp: $(srcdir)/mesydaq2widgetbase.ui mesydaq2widgetbase.h mesydaq2widgetbase.moc
	rm -f mesydaq2widgetbase.cpp
	echo '#include <kdialog.h>' > mesydaq2widgetbase.cpp
	echo '#include <klocale.h>' >> mesydaq2widgetbase.cpp
	$(UIC) -tr ${UIC_TR} -i mesydaq2widgetbase.h $(srcdir)/mesydaq2widgetbase.ui > mesydaq2widgetbase.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" mesydaq2widgetbase.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_mesydaq2widgetbase,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> mesydaq2widgetbase.cpp ;\
	rm -f mesydaq2widgetbase.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "mesydaq2widgetbase.moc"' >> mesydaq2widgetbase.cpp; else rm -f mesydaq2widgetbase.cpp ; exit $$ret ; fi

mesydaq2widgetbase.h: $(srcdir)/mesydaq2widgetbase.ui
	rm -rf mesydaq2widgetbase.h;
	$(UIC) $(srcdir)/mesydaq2widgetbase.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> mesydaq2widgetbase.h ;
mesydaq2widgetbase.moc: mesydaq2widgetbase.h
	$(MOC) mesydaq2widgetbase.h -o mesydaq2widgetbase.moc

mesydaq2mainwindow.cpp: $(srcdir)/mesydaq2mainwindow.ui mesydaq2mainwindow.h mesydaq2mainwindow.moc
	rm -f mesydaq2mainwindow.cpp
	echo '#include <kdialog.h>' > mesydaq2mainwindow.cpp
	echo '#include <klocale.h>' >> mesydaq2mainwindow.cpp
	$(UIC) -tr ${UIC_TR} -i mesydaq2mainwindow.h $(srcdir)/mesydaq2mainwindow.ui > mesydaq2mainwindow.cpp.temp ; ret=$$?; \
	$(PERL) -pe "s,${UIC_TR}( \"\" ),QString::null,g" mesydaq2mainwindow.cpp.temp | $(PERL) -pe "s,${UIC_TR}( \"\"\, \"\" ),QString::null,g" | $(PERL) -pe "s,image([0-9][0-9]*)_data,img\$$1_mesydaq2mainwindow,g" | $(PERL) -pe "s,: QWizard\(,: KWizard(,g" >> mesydaq2mainwindow.cpp ;\
	rm -f mesydaq2mainwindow.cpp.temp ;\
	if test "$$ret" = 0; then echo '#include "mesydaq2mainwindow.moc"' >> mesydaq2mainwindow.cpp; else rm -f mesydaq2mainwindow.cpp ; exit $$ret ; fi

mesydaq2mainwindow.h: $(srcdir)/mesydaq2mainwindow.ui
	rm -rf mesydaq2mainwindow.h;
	$(UIC) $(srcdir)/mesydaq2mainwindow.ui | $(PERL) -pi -e "s,public QWizard,public KWizard,g; s,#include <qwizard.h>,#include <kwizard.h>,g" >> mesydaq2mainwindow.h ;
mesydaq2mainwindow.moc: mesydaq2mainwindow.h
	$(MOC) mesydaq2mainwindow.h -o mesydaq2mainwindow.moc
